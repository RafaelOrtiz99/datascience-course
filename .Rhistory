#2. puntos de corte (break points)
#3. nombres categoricos en los intervalos
students$Income.cat <- cut(students$Income, breaks = bp, labels= names)
students$Income.cat <- cut(students$Income, breaks = bp)
#Cut recibe 3 parametros
#1. columna a cortar
#2. puntos de corte (break points)
#3. nombres categoricos en los intervalos
students$Income.cat <- cut(students$Income, breaks = bp, labels= names)
students$Income.cat2 <- cut(students$Income, breaks = bp)
levels <- c("level1", "level2", "level3", "level4")
students$Income.cat3 <- cut(students$Income, braks = 4, labels = levels)
students$Income.cat3 <- cut(students$Income, breaks = 4, labels = levels)
students$Income.cat3 <- cut(students$Income, breaks = 3, labels = names)
students$Income.cat3 <- cut(students$Income, breaks = 3)
, labels = names
students$Income.cat3 <- cut(students$Income, breaks = 3, labels = names)
install.packages('dummies')
library(dummies)
family.salary = c(40000,60000,50000,80000,60000,70000,60000)
family.size = c(4,3,2,2,3,4,3)
family.car = c('lujo','compacto','utilitario','lujo','compacto','compacto','compacto')
family <- data.frame(family.salary,family.size,family.car)
View(family)
#Variables ficticias
students <- read.csv('Recursos/r-course-master/data/tema1/data-conversion.csv')
students_dummy <- dummy.data.frame(students, sep = ".")
View(students_dummy)
names(students_dummy)
View(students)
View(students_dummy)
View(students)
View(students_dummy)
dummy(students$State, sep =".")
dummy.data.frame(students, names = c("State", "Gender"), sep = ".")
dummy.data.frame(students, names = c("Gender"), sep = ".")
housng.data <- read.csv('Recursos/r-course-master/data/tema1/housing-with-missing-value.csv')
View(housng.data)
is.na(housng.data)
housng.data <- read.csv('Recursos/r-course-master/data/tema1/housing-with-missing-value.csv', header = T, stringsAsFactors =  F)
housing.data <- read.csv('Recursos/r-course-master/data/tema1/housing-with-missing-value.csv', header = T, stringsAsFactors =  F)
remove(housng.data)
#Despues de cargar el data set, lo primero que hacemos es un resumen de las variables
#summary es muy importante, da la pista para donde empezar a buscar cosas
summary(housing.data)
#Omitir todos los NA
husing.data.1 <- na.omit(housing.data)
View(husing.data.1)
summary(housing.data.1)
remove(husing.data.1)
#Omitir todos los NA
housing.data.1 <- na.omit(housing.data)
summary(housing.data.1)
housing.data.2<- housing.data.1[complete.cases(housing.data[!(names(housing.data)%in% drop_na),]),]
#Eliminar NA de una columna
drop_na <- c("rad")
housing.data.2<- housing.data.1[complete.cases(housing.data[!(names(housing.data)%in% drop_na),]),]
View(housing.data.2)
#Eliminar una columna
housing.data$rad <- NULL
#Eliminar varias columnas
drops <- c("rad","ptratio")
housing.data.3 <- housing.data[!(names(housing.data) %in% drops),]
housing.data.3 <- housing.data[!(names(housing.data) %in% drops)]
View(housing.data.3)
install.packages("Hmisc")
library(Hmisc)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
y
library(Hmisc)
housing.data <- read.csv('Recursos/r-course-master/data/tema1/housing-with-missing-value.csv')
#La Imputación involucrarellenar o cambiar NA por constantes
housing.data$ptratio <- impute(housing.data$ptratio, mean)
summary(housing.data)
housing.data$rad <- impute(housing.data$rad, mean)
summary(housing.data)
housing.data <- read.csv('Recursos/r-course-master/data/tema1/housing-with-missing-value.csv')
housing.data.1 <- housing.data
#La Imputación involucra rellenar o cambiar NA por constantes
housing.data.1$ptratio <- impute(housing.data$ptratio, mean)
housing.data.1$rad <- impute(housing.data$rad, mean)
remove(housing.data.1)
housing.data.1 <- housing.data
summary(housing.data.1)
#La Imputación involucra rellenar o cambiar NA por constantes
housing.data.1$ptratio <- impute(housing.data$ptratio, mean)
summary(housing.data.1)
housing.data.1$rad <- impute(housing.data$rad, mean)
summary(housing.data.1)
housing.data.2 <- housing.data
#Imputamos los NA por la mediana de los datos
housing.data.2$ptratio <- impute(housing.data.2$ptratio, median)
housing.data.2$rad <- impute(housing.data.2$rad, median)
summary(housing.data.1)
housing.data.3 <- housing.data
#Utilizar valor pre definido
housing.data.3$ptratio <- impute(housing.data.3$ptratio, 18)
summary(housing.data.2)
summary(housing.data.3)
housing.data.3$rad <- impute(housing.data.3$rad, 18)
summary(housing.data.3)
housing.data.3$rad <- impute(housing.data.3$rad, 7)
summary(housing.data.3)
#Patron que sigue las variables que faltan
install.package("mice")
#Patron que sigue las variables que faltan
install.packages("mice")
library(mice)
md.pattern(housing.data)
#plots
install.packages("VIM")
library(VIM)
#Agregar data frame
aggr(housing.data)
#Agregar data frame
aggr(housing.data, col = c('green','red'))
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T)
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T)
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T, labels = names(housing.data))
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T, labels = names(housing.data), cex.axis = 1)
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T, labels = names(housing.data), cex.axis = 0,5)
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T, labels = names(housing.data), cex.axis = 0.5)
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T,
labels = names(housing.data), cex.axis = 0.5, gap = 3)
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T,
labels = names(housing.data), cex.axis = 0.7, gap = 1)
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T,
labels = names(housing.data), cex.axis = 0.7, gap = 1, ylab = c("Histograma NAs", "Patrón"))
install.packages('tidyr')
library(tidyr)
crime_data <- read.csv('Recursos/r-course-master/data/tema1/USArrests.csv')
View(crime_data)
crime_data <- read.csv('Recursos/r-course-master/data/tema1/USArrests.csv',stringsAsFactors = F)
View(crime_data)
#Añadir columna al dataset
crime_data <- cbind(state = row.names(crime_data),crime_data)
View(crime_data)
rendimiento_academico <- read.csv('~/DATOS/Rendimiento_Académico/Datos_UNIFICADOS_INGENIERIAS.csv')
View(rendimiento_academico)
rendimiento_academico <- read.csv('~/DATOS/Rendimiento_Académico/Datos_UNIFICADOS_MPDAE.csv')
View(rendimiento_academico)
View(rendimiento_academico)
View(rendimiento_academico)
remove(rendimiento_academico)
#Unir información
crime_data.1 <- gather(crime_data, key="crime_type", value = 'arrest_estimated', Murder:UrbanPop)
View(crime_data.1)
View(crime_data)
#Traducir todas las columnas excepto state
crime_data.2 <- gather(crime_data, key="crime_type", value = "arrest_estimated", -state)
library(tidyr)
#Traducir todas las columnas excepto state
crime_data.2 <- gather(crime_data, key="crime_type", value = "arrest_estimated", -state)
View(crime_data.2)
crime_data.3 <- gather(crime_data, key="crime_type", value = "arrest_estimated", Murder, Assault)
View(crime_data.3)
View(crime_data)
View(crime_data.1)
View(crime_data.2)
#Separar
crime_data.4 <- spread(cirme_data.2, key = "crime_type", value = "arrest_estimated")
#Separar
crime_data.4 <- spread(crime_data.2, key = "crime_type", value = "arrest_estimated")
View(crime_data.4)
View(crime_data)
View(crime_data.4)
View(crime_data)
#Unit: Tomar varias columnas y unirlas en una sola
crime_data.5 <- unite(crime_data, col="Murder_Assault", Murder, Assault, sep ="_")
View(crime_data.5)
crime_data.6 <- separate(crime_data.5, col ="Murder_Assault", into = c("Murder","Assault"), sep = "_")
View(crime_data.6)
View(crime_data.6)
library(mice)
housing_data <- read.csv('Recursos/r-course-master/data/tema1/housing-with-missing-value.csv',
header = T,  stringsAsFactors = F)
View(housing_data)
summary(housing_data)
#predictive mean machine, modelo predictivo para predecir el valor promedio de los datos
imputed_data <- mice(housing_data[, names(housing_data) %in% columns],
m = 5, maxit = 50, method = 'pmm', seed = 2018)
columns <- c('ptratio', 'rad')
#predictive mean machine, modelo predictivo para predecir el valor promedio de los datos
imputed_data <- mice(housing_data[, names(housing_data) %in% columns],
m = 5, maxit = 50, method = 'pmm', seed = 2018)
View(imputed_data)
#predictive mean machine, modelo predictivo para predecir el valor promedio de los datos
imputed_data <- mice(housing_data[, names(housing_data) %in% columns],
m = 5, maxit = 50, method = 'pmm', seed = 2018)
summary(imputed_data)
summary(imputed_data)
imputed_data <- mice(housing_data[,names(housing_data) %in% columns],
m = 5, maxit = 50, method = 'pmm', seed = 2018)
summary(imputed_data)
complete_data <- complete(imputed_data)
View(imputed_data)
View(complete_data)
View(housing_data)
library(mice)
complete_data <- complete(imputed_data)
#se puede escribir solo complete, este caso es para indicar que la función es de ese paquete, en caso de que existan
#más librerias cargadas con metodos que se nombren igual
complete_data <- mice::complete(imputed_data)
View(complete_data)
summary(complete_data)
#reemplazar en el dataframe
housing_data$ptratio <- complete_data$ptratio
housing_data$rad <- complete_data$rad
summary(housing_data)
anyNA(housing_data)
housing_data1 <- read.csv('Recursos/r-course-master/data/tema1/housing-with-missing-value.csv',
header = T,  stringsAsFactors = F)
#
anyNA(housing_data1)
remove(housing_data1)
#Devuelve un booleano si hay NA es TRUE, si no es FALSE
anyNA(housing_data)
library(Hmisc)
housing_data <- read.csv('Recursos/r-course-master/data/tema1/housing-with-missing-value.csv',
header = T,  stringsAsFactors = F)
#Devuelve un booleano si hay NA es TRUE, si no es FALSE
anyNA(housing_data)
impute.org <- aregImpute(-ptratio+rad, data = housing_data, n.impute = 5)
impute.org <- aregImpute(-ptratio+rad, data = housing_data, n.impute = 5)
impute_arg <- aregImpute(~ptratio+rad, data = housing_data, n.impute = 5)
View(impute_arg)
imppute_arg
impute_arg
impute_arg$imputed$rad
ozone-data <- read.csv('Recursos/r-course-master/data/tema1/ozone.csv', stringsAsFactors = F)
ozone-data <- read.csv('Recursos/r-course-master/data/tema1/ozone.csv', stringsAsFactors = F)
ozone_data <- read.csv('Recursos/r-course-master/data/tema1/ozone.csv', stringsAsFactors = F)
View(ozone_data)
anyNA(ozone_data)
summary(ozone_data)
outliers_value <- boxplot(ozone_data$pressure_height)
outliers_value <- boxplot(ozone_data$pressure_height)$out
boxplot(ozone_data$pressure_height, main="Pressure Height")
boxplot(ozone_data$pressure_height, main="Pressure Height", boxwex = 0,1)
boxplot(ozone_data$pressure_height, main="Pressure Height", boxwex = 0.1)
boxplot(ozone_data$pressure_height, main="Pressure Height", boxwex = 0.5)
#Representar 2 variables, presión en función del mes
boxplot(pressure_height ~ Month, ozone_data)
#Representar 2 variables, presión en función del mes
boxplot(pressure_height ~ Month, ozone_data, main = "Pressure Height Per Month")
boxplot(ozone_reading ~ Month, ozone_data, main = "Ozone per Month")
#Con el $out, accedemos directamente a los outliers
boxplot(ozone_reading ~ Month, ozone_data, main = "Ozone per Month")$out
mtext('hola')
mtext($out)
#Reemplazar outliers
impute_outliers <- function(dataframne, removeNA = TRUE){
#Obtener 2 cuartiles(por debajo del 5% y por encima del 95%)
quantiles <- quantile(x, c(0.05, 0.095), na.rm = removeNA)
#Reemplazar los que esten por debajo del 5% por la media
x[x<quantile[1]] <- mean(x, na.rm = removeNA)
#Reemplazar los que esten por encima del 95% por la mediana
x[x>quantile(2)] <- median(x, na.rm = removeNA)
}
#Reemplazar outliers
impute_outliers <- function(dataframne, removeNA = TRUE){
#Obtener 2 cuartiles(por debajo del 5% y por encima del 95%)
quantiles <- quantile(x, c(0.05, 0.095), na.rm = removeNA)
#Reemplazar los que esten por debajo del 5% por la media
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
#Reemplazar los que esten por encima del 95% por la mediana
x[x>quantiles(2)] <- median(x, na.rm = removeNA)
}
imputed_data <- impute_outliers(ozone_data$pressure_height)
#Reemplazar outliers
impute_outliers <- function(x, removeNA = TRUE){
#Obtener 2 cuartiles(por debajo del 5% y por encima del 95%)
quantiles <- quantile(x, c(0.05, 0.095), na.rm = removeNA)
#Reemplazar los que esten por debajo del 5% por la media
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
#Reemplazar los que esten por encima del 95% por la mediana
x[x>quantiles(2)] <- median(x, na.rm = removeNA)
}
imputed_data <- impute_outliers(ozone_data$pressure_height)
imputed_data <- impute_outliers(ozone_data$pressure_height)
impute_outliers <- function(x, removeNA = TRUE){
#Obtener 2 cuartiles(por debajo del 5% y por encima del 95%)
quantiles <- quantile(x, c(0.05, 0.095), na.rm = removeNA)
#Reemplazar los que esten por debajo del 5% por la media
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
#Reemplazar los que esten por encima del 95% por la mediana
x[x>quantiles(2)] <- median(x, na.rm = removeNA)
}
imputed_data <- impute_outliers(ozone_data$pressure_height)
#Reemplazar los que esten por encima del 95% por la mediana
x[x>quantiles(2)] <- median(x, na.rm = removeNA)
impute_outliers <- function(x, removeNA = TRUE){
#Obtener 2 cuartiles(por debajo del 5% y por encima del 95%)
quantiles <- quantile(x, c(0.05, 0.095), na.rm = removeNA)
#Reemplazar los que esten por debajo del 5% por la media
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
#Reemplazar los que esten por encima del 95% por la mediana
x[x>quantiles(2)] <- median(x, na.rm = removeNA)
}
View(impute_outliers)
imputed_data <- impute_outliers(ozone_data$pressure_height)
impute_outliers <- function(x, removeNA = TRUE){
#Obtener 2 cuartiles(por debajo del 5% y por encima del 95%)
quantiles <- quantile(x, c(0.05, 0.095), na.rm = removeNA)
#Reemplazar los que esten por debajo del 5% por la media
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
#Reemplazar los que esten por encima del 95% por la mediana
x[x>quantiles(2)] <- median(x, na.rm = removeNA)
}
imputed_data <- impute_outliers(ozone_data$pressure_height)
#Reemplazar outliers
impute_outliers <- function(x, removeNA = TRUE){
#Obtener 2 cuartiles(por debajo del 5% y por encima del 95%)
quantiles <- quantile(x, c(0.05, 0.095), na.rm = removeNA)
#Reemplazar los que esten por debajo del 5% por la media
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
#Reemplazar los que esten por encima del 95% por la mediana
x[x>quantiles(2)] <- median(x, na.rm = removeNA)
}
imputed_data <- impute_outliers(ozone_data$pressure_height)
ozone_data <- read.csv('Recursos/r-course-master/data/tema1/ozone.csv', stringsAsFactors = F)
imputed_data <- impute_outliers(ozone_data$pressure_height)
#Reemplazar outliers
impute_outliers <- function(x, removeNA = TRUE){
#Obtener 2 cuartiles(por debajo del 5% y por encima del 95%)
quantiles <- quantile(x, c(0.05, 0.095), na.rm = removeNA)
#Reemplazar los que esten por debajo del 5% por la media
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
#Reemplazar los que esten por encima del 95% por la mediana
x[x>quantiles[2]] <- median(x, na.rm = removeNA)
}
imputed_data <- impute_outliers(ozone_data$pressure_height)
boxplot(ozone_data$pressure_height, main = "Presión con outliers")
#par = ordena o estructura graficos arriba o al lado del otroS
par(mfrow = c(1,2))
boxplot(ozone_data$pressure_height, main = "Presión con outliers")
impute_outliers <- function(x, removeNA = TRUE){
#Obtener 2 cuartiles(por debajo del 5% y por encima del 95%)
quantiles <- quantile(x, c(0.05, 0.095), na.rm = removeNA)
#Reemplazar los que esten por debajo del 5% por la media
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
#Reemplazar los que esten por encima del 95% por la mediana
x[x>quantiles[2]] <- median(x, na.rm = removeNA)
x
}
imputed_data <- impute_outliers(ozone_data$pressure_height)
#par = ordena o estructura graficos arriba o al lado del otroS
par(mfrow = c(1,2))
boxplot(ozone_data$pressure_height, main = "Presión con outliers")
boxplot(imputed_data, main = "Presión sin outliers")
imputed_data <- impute_outliers(ozone_data$pressure_height)
boxplot(imputed_data, main = "Presión sin outliers")
ozone_data <- read.csv('Recursos/r-course-master/data/tema1/ozone.csv', stringsAsFactors = F)
anyNA(ozone_data)
summary(ozone_data)
#Diagrama de caja y bigotes
#La linea negra dentro de la caja corresponde a la mediana(50%)
#La linea inferior de la caja es el cuartil 1(25%)
#parte superior de la caja es el tercer cuartil (75%)
#Rango intercuartilico = espacio entre los cuartiles, distancia entre la parte superior y la inferior de la caja
boxplot(ozone_data$pressure_height, main="Pressure Height", boxwex = 0.5)
#Representar 2 variables, presión en función del mes
boxplot(pressure_height ~ Month, ozone_data, main = "Pressure Height Per Month")
#Con el $out, accedemos directamente a los outliers
boxplot(ozone_reading ~ Month, ozone_data, main = "Ozone per Month")$out
#Reemplazar outliers
impute_outliers <- function(x, removeNA = TRUE){
#Obtener 2 cuartiles(por debajo del 5% y por encima del 95%)
quantiles <- quantile(x, c(0.05, 0.095), na.rm = removeNA)
#Reemplazar los que esten por debajo del 5% por la media
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
#Reemplazar los que esten por encima del 95% por la mediana
x[x>quantiles[2]] <- median(x, na.rm = removeNA)
x
}
imputed_data <- impute_outliers(ozone_data$pressure_height)
#par = ordena o estructura graficos arriba o al lado del otroS
par(mfrow = c(1,2))
boxplot(ozone_data$pressure_height, main = "Presión con outliers")
boxplot(imputed_data, main = "Presión sin outliers")
View(impute_outliers)
#Reemplazar outliers
impute_outliers <- function(x, removeNA = TRUE){
#Obtener 2 cuartiles(por debajo del 5% y por encima del 95%)
quantiles <- quantile(x, c(0.05, 0.95), na.rm = removeNA)
#Reemplazar los que esten por debajo del 5% por la media
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
#Reemplazar los que esten por encima del 95% por la mediana
x[x>quantiles[2]] <- median(x, na.rm = removeNA)
x
}
imputed_data <- impute_outliers(ozone_data$pressure_height)
#par = ordena o estructura graficos arriba o al lado del otroS
par(mfrow = c(1,2))
boxplot(ozone_data$pressure_height, main = "Presión con outliers")
boxplot(imputed_data, main = "Presión sin outliers")
#Remplazar outliers
replace_outliers <- function(x, removeNA){
quantiles <- quantile(x, probs = c(0.25, 0.75), na.rm = removeNA)
caps <- quantils[x, probs = c(0.05, 0.95), na.rm = removeNA]
#Rango intercuartilico
iqr <- qrts[2] - qrts[1]
#1.5 veces el rango intercuartilico
H <- 1.5 * iqr
x[x<qrts[1] - h] <- caps[1]
x[x>qrts[2] + h] <- caps[2]
x
}
boxplot(ozone_data$pressure_height, main = "Presión con outliers")
capped_pressure_height <- replace_outliers(ozone_data$pressure_height)
#Remplazar outliers
replace_outliers <- function(x, removeNA = TRUE){
quantiles <- quantile(x, probs = c(0.25, 0.75), na.rm = removeNA)
caps <- quantils[x, probs = c(0.05, 0.95), na.rm = removeNA]
#Rango intercuartilico
iqr <- qrts[2] - qrts[1]
#1.5 veces el rango intercuartilico
H <- 1.5 * iqr
x[x<qrts[1] - h] <- caps[1]
x[x>qrts[2] + h] <- caps[2]
x
}
par(mfrow = c(1,2))
boxplot(ozone_data$pressure_height, main = "Presión con outliers")
capped_pressure_height <- replace_outliers(ozone_data$pressure_height)
#Remplazar outliers
replace_outliers <- function(x, removeNA = TRUE){
quantiles <- quantile(x, probs = c(0.25, 0.75), na.rm = removeNA)
caps <- quantiles[x, probs = c(0.05, 0.95), na.rm = removeNA]
#Rango intercuartilico
iqr <- qrts[2] - qrts[1]
#1.5 veces el rango intercuartilico
H <- 1.5 * iqr
x[x<qrts[1] - h] <- caps[1]
x[x>qrts[2] + h] <- caps[2]
x
}
par(mfrow = c(1,2))
boxplot(ozone_data$pressure_height, main = "Presión con outliers")
capped_pressure_height <- replace_outliers(ozone_data$pressure_height)
#Remplazar outliers
replace_outliers <- function(x, removeNA = TRUE){
quantiles <- quantile(x, probs = c(0.25, 0.75), na.rm = removeNA)
caps <- quantile[x, probs = c(0.05, 0.95), na.rm = removeNA]
#Rango intercuartilico
iqr <- qrts[2] - qrts[1]
#1.5 veces el rango intercuartilico
H <- 1.5 * iqr
x[x<qrts[1] - h] <- caps[1]
x[x>qrts[2] + h] <- caps[2]
x
}
par(mfrow = c(1,2))
boxplot(ozone_data$pressure_height, main = "Presión con outliers")
capped_pressure_height <- replace_outliers(ozone_data$pressure_height)
#Remplazar outliers
replace_outliers <- function(x, removeNA = TRUE){
qrts <- quantile(x, probs = c(0.25, 0.75), na.rm = removeNA)
caps <- quantile[x, probs = c(0.05, 0.95), na.rm = removeNA]
#Rango intercuartilico
iqr <- qrts[2] - qrts[1]
#1.5 veces el rango intercuartilico
H <- 1.5 * iqr
x[x<qrts[1] - h] <- caps[1]
x[x>qrts[2] + h] <- caps[2]
x
}
par(mfrow = c(1,2))
boxplot(ozone_data$pressure_height, main = "Presión con outliers")
capped_pressure_height <- replace_outliers(ozone_data$pressure_height)
#Remplazar outliers
replace_outliers <- function(x, removeNA = TRUE){
qrts <- quantile(x, probs = c(0.25, 0.75), na.rm = removeNA)
caps <- quantile(x, probs = c(0.05, 0.95), na.rm = removeNA)
#Rango intercuartilico
iqr <- qrts[2] - qrts[1]
#1.5 veces el rango intercuartilico
H <- 1.5 * iqr
x[x<qrts[1] - h] <- caps[1]
x[x>qrts[2] + h] <- caps[2]
x
}
par(mfrow = c(1,2))
boxplot(ozone_data$pressure_height, main = "Presión con outliers")
capped_pressure_height <- replace_outliers(ozone_data$pressure_height)
#Remplazar outliers
replace_outliers <- function(x, removeNA = TRUE){
qrts <- quantile(x, probs = c(0.25, 0.75), na.rm = removeNA)
caps <- quantile(x, probs = c(0.05, 0.95), na.rm = removeNA)
#Rango intercuartilico
iqr <- qrts[2] - qrts[1]
#1.5 veces el rango intercuartilico
H <- 1.5 * iqr
x[x<qrts[1] - H] <- caps[1]
x[x>qrts[2] + H] <- caps[2]
x
}
par(mfrow = c(1,2))
boxplot(ozone_data$pressure_height, main = "Presión con outliers")
capped_pressure_height <- replace_outliers(ozone_data$pressure_height)
boxplot(capped_pressure_height, main = "Presión sin outliers")
