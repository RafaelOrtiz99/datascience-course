getwd()
setwd(dir = "../../../Udemy/datascience-course/")
pupulation_url <- 'Recursos/r-course-master/data/tema1/WorldPopulation-wiki.htm'
tables <- readHTMLTable(pupulation_url)
library(htmltools)
tables <- readHTMLTable(pupulation_url)
detach("package:htmltools", unload = TRUE)
library(XML)
tables <- readHTMLTable(pupulation_url)
View(tables)
tables[[6]]
customTable <- readHTMLList(population_url,which = 6)
population_url <- 'Recursos/r-course-master/data/tema1/WorldPopulation-wiki.htm'
customTable <- readHTMLList(population_url,which = 6)
VIew(customTable)
View(customTable)
View(tables)
install.packages('jsonlite')
library(jsonlite)
install.packages('jsonlite')
library(jsonlite)
data.1 <- fromJSON('Recursos/r-course-master/data/tema1/students.json')
data.2 <- fromJSON('Recursos/r-course-master/data/tema1/student-courses.json')
View(data.1)
View(data.2)
#install.packages('jsonlite')
#library(jsonlite)
install.packages('currl')
#install.packages('jsonlite')
#library(jsonlite)
install.packages('curl')
#install.packages('jsonlite')
#library(jsonlite)
#install.packages('curl')
library(curl)
url <- 'http://www.floatrates.com/daily/usd.json'
currencies <- fromJSON(url)
View(currencies)
View(data.1)
currencies.data <- currencies$eur$cod
currencies.data <- currencies$all
View(currencies.data)
head(dat.1)
head(data.1)
head(data.1, 1, 3)
head(data.1, 3)
head(data.1, 30)
head(data.1$Email,3)
head(data.1$Email)
data.1[c(2,5,8),]
data.1[,c(2,5)]
head(data.2,3)
head(data.2,3)
data.2(,c(2,3))
data.2[,c(2,3)]
data.2[,c(2,3,6)]
students_data <- read.fwf('Recursos/r-course-master/data/tema1/student-fwf.txt',
widths = c(4,15,20,15,4),
col.names = c('ID','Nombre','Email','Carrera','Año'))
View(students_data)
students_data_header <- read.fwf('Recursos/r-course-master/data/')
# sep = \t es el separador
#skip para evitar lineas
students_data_header <- read.fwf('Recursos/r-course-master/data/tema1/student-fwf-header.txt',
widths = c(4,15,20,15,4),
header = T,sep = "\t", skip = 2)
View(students_data_header)
View(students_data)
View(students_data_header)
students_data_no_email <- read.fwf('Recursos/r-course-master/data/tema1/student-fwf.txt',
widths = c(4,15,-20,15,4),
col.names = c('ID','Nombre','Carrera','Año'))
View(students_data_no_email)
View(students_data_header)
View(students_data_no_email)
missing_data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv')
#Convert the empty fields in NA
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv',na.strings = "")
View(missing_data)
View(data)
#Clean NA values
data.cleaned <- na.omit(data)
View(data.cleaned)
#Search if value is na, return a boolean
is.na(data[4,2])
is.na(data$Income)
missing_data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv')
#Convert the empty fields in NA
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv',na.strings = "")
#Clean NA values
data.cleaned <- na.omit(data)
data.income.cleaned <- data[!is.na(data$Income),]
View(data.income.cleaned)
View(data)
#Complete.cases, dado un dataframe o tabla como argumento, devuelve un vector de booleanos,
#True para los que no tienen casos faltantes.
complete.cases(data)
data.cleaned.2 <- data[data[complete.cases(data),]]
data.cleaned.2 <- data[complete.cases(data),]
View(data.cleaned.2)
#Convertir 0 de ingresos en na
data$Income[data$Income == 0]
#Convertir 0 de ingresos en na
data$Income[data$Income == 0] <- NA
View(data)
#Medidas de centralización y dispersión
mean(data$Income)
mean(data$Income, na.rm = TRUE)
mean(data$Income, na.rm = TRUE)
#Desviación estadar
sd(data$Income)
sd(data$Income, na.rm = T)
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv')
View(data)
#Crear nueva columna
data$Income.mean <- ifelse(is.na(data$Income), mean(data$Income,na.rm = T), data$Income)
View(data)
rand.impute <- function(x){
#missing contiene un vector de valores booleanos, dependiendo del NA de x
missing  <- is.na(x)
#n.missing contiene cuantos valores son NA dentro de x
n.missing <- sum(missing)
#x.obs valores que tienen datos diferentes a na en x
x.obs <- x[!missing]
# por defecto devolvere lo mismo que habia en el parametro de entrada
imputed <- x
#En los valores faltantes, se reemplazan por una muestra que si conocemos
imputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
return (imputed)
}
random.impute.data.frame <- function(dataframe, cols){
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], '.imputed', sep = "")
dataframe[name] <- rand.impute(dataframe[,col])
}
}
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv')
random.impute.data.frame(data,c(1,2))
View(data)
random.impute.data.frame <- function(dataframe, cols){
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], '.imputed', sep = "")
dataframe[name] <- rand.impute(dataframe[,col])
}
dataframe
}
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv')
random.impute.data.frame(data,c(1,2))
data <- random.impute.data.frame(data,c(1,2))
View(data)
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv')
View(data)
data <- random.impute.data.frame(data,c(1,2))
View(data)
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv',na.strings = "")
data <- random.impute.data.frame(data,c(1,2))
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv',na.strings = "")
data$Income[data$Income == 0] <- NA
data <- random.impute.data.frame(data,c(1,2))
