getwd()
setwd(dir = "../../../Udemy/datascience-course/")
pupulation_url <- 'Recursos/r-course-master/data/tema1/WorldPopulation-wiki.htm'
tables <- readHTMLTable(pupulation_url)
library(htmltools)
tables <- readHTMLTable(pupulation_url)
detach("package:htmltools", unload = TRUE)
library(XML)
tables <- readHTMLTable(pupulation_url)
View(tables)
tables[[6]]
customTable <- readHTMLList(population_url,which = 6)
population_url <- 'Recursos/r-course-master/data/tema1/WorldPopulation-wiki.htm'
customTable <- readHTMLList(population_url,which = 6)
VIew(customTable)
View(customTable)
View(tables)
install.packages('jsonlite')
library(jsonlite)
install.packages('jsonlite')
library(jsonlite)
data.1 <- fromJSON('Recursos/r-course-master/data/tema1/students.json')
data.2 <- fromJSON('Recursos/r-course-master/data/tema1/student-courses.json')
View(data.1)
View(data.2)
#install.packages('jsonlite')
#library(jsonlite)
install.packages('currl')
#install.packages('jsonlite')
#library(jsonlite)
install.packages('curl')
#install.packages('jsonlite')
#library(jsonlite)
#install.packages('curl')
library(curl)
url <- 'http://www.floatrates.com/daily/usd.json'
currencies <- fromJSON(url)
View(currencies)
View(data.1)
currencies.data <- currencies$eur$cod
currencies.data <- currencies$all
View(currencies.data)
head(dat.1)
head(data.1)
head(data.1, 1, 3)
head(data.1, 3)
head(data.1, 30)
head(data.1$Email,3)
head(data.1$Email)
data.1[c(2,5,8),]
data.1[,c(2,5)]
head(data.2,3)
head(data.2,3)
data.2(,c(2,3))
data.2[,c(2,3)]
data.2[,c(2,3,6)]
students_data <- read.fwf('Recursos/r-course-master/data/tema1/student-fwf.txt',
widths = c(4,15,20,15,4),
col.names = c('ID','Nombre','Email','Carrera','Año'))
View(students_data)
students_data_header <- read.fwf('Recursos/r-course-master/data/')
# sep = \t es el separador
#skip para evitar lineas
students_data_header <- read.fwf('Recursos/r-course-master/data/tema1/student-fwf-header.txt',
widths = c(4,15,20,15,4),
header = T,sep = "\t", skip = 2)
View(students_data_header)
View(students_data)
View(students_data_header)
students_data_no_email <- read.fwf('Recursos/r-course-master/data/tema1/student-fwf.txt',
widths = c(4,15,-20,15,4),
col.names = c('ID','Nombre','Carrera','Año'))
View(students_data_no_email)
View(students_data_header)
View(students_data_no_email)
missing_data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv')
#Convert the empty fields in NA
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv',na.strings = "")
View(missing_data)
View(data)
#Clean NA values
data.cleaned <- na.omit(data)
View(data.cleaned)
#Search if value is na, return a boolean
is.na(data[4,2])
is.na(data$Income)
missing_data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv')
#Convert the empty fields in NA
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv',na.strings = "")
#Clean NA values
data.cleaned <- na.omit(data)
data.income.cleaned <- data[!is.na(data$Income),]
View(data.income.cleaned)
View(data)
#Complete.cases, dado un dataframe o tabla como argumento, devuelve un vector de booleanos,
#True para los que no tienen casos faltantes.
complete.cases(data)
data.cleaned.2 <- data[data[complete.cases(data),]]
data.cleaned.2 <- data[complete.cases(data),]
View(data.cleaned.2)
#Convertir 0 de ingresos en na
data$Income[data$Income == 0]
#Convertir 0 de ingresos en na
data$Income[data$Income == 0] <- NA
View(data)
#Medidas de centralización y dispersión
mean(data$Income)
mean(data$Income, na.rm = TRUE)
mean(data$Income, na.rm = TRUE)
#Desviación estadar
sd(data$Income)
sd(data$Income, na.rm = T)
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv')
View(data)
#Crear nueva columna
data$Income.mean <- ifelse(is.na(data$Income), mean(data$Income,na.rm = T), data$Income)
View(data)
rand.impute <- function(x){
#missing contiene un vector de valores booleanos, dependiendo del NA de x
missing  <- is.na(x)
#n.missing contiene cuantos valores son NA dentro de x
n.missing <- sum(missing)
#x.obs valores que tienen datos diferentes a na en x
x.obs <- x[!missing]
# por defecto devolvere lo mismo que habia en el parametro de entrada
imputed <- x
#En los valores faltantes, se reemplazan por una muestra que si conocemos
imputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
return (imputed)
}
random.impute.data.frame <- function(dataframe, cols){
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], '.imputed', sep = "")
dataframe[name] <- rand.impute(dataframe[,col])
}
}
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv')
random.impute.data.frame(data,c(1,2))
View(data)
random.impute.data.frame <- function(dataframe, cols){
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], '.imputed', sep = "")
dataframe[name] <- rand.impute(dataframe[,col])
}
dataframe
}
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv')
random.impute.data.frame(data,c(1,2))
data <- random.impute.data.frame(data,c(1,2))
View(data)
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv')
View(data)
data <- random.impute.data.frame(data,c(1,2))
View(data)
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv',na.strings = "")
data <- random.impute.data.frame(data,c(1,2))
data <- read.csv('Recursos/r-course-master/data/tema1/missing-data.csv',na.strings = "")
data$Income[data$Income == 0] <- NA
data <- random.impute.data.frame(data,c(1,2))
View(data)
View(rand.impute)
View(random.impute.data.frame)
housing <- read.csv('Recursos/r-course-master/data/tema1/BostonHousing.csv')
View(housing)
#scale sirve para variables numericas
#Normalización
housing.z <- scale(housing)
View(housing.z)
housin.none <- sale(housing, )
housin.none <- scale(housing, center = F, scale = F )
View(housin.none)
View(housing)
remove(housin.none)
housing.none <- scale(housing, center = F, scale = F )
housing.meann <- scale(housing, center = T, scale = F)
View(housing.meann)
remove(housing.meann)
housing.mean <- scale(housing, center = T, scale = F)
View(housing.mean)
View(housing)
housing.sd <- scale(housing, center = F, scale = T)
View(housing.sd)
#sd 0= desviación estandar = sqrt(sum(x^2)/(n-1))
#scale no se puede en variables categoricas
scale.many = function(dataframe, cols){
names <- names(dataframe)
for(col in cols){
name <- paste(names[col],"z", sep =".")
dataframe[name] <- scale(dataframe[, col])
}
cat('Hemos normalizado ',length(cols), ' variable(s)')
dataframe
}
housing <- scale.many(housing, c(1, 3, 5:8))
View(housing)
students <- read.csv('Recursos/r-course-master/data/tema1/data-conversion.csv')
View(students)
#Cut recibe 3 parametros
#1. columna a cortar
#2. puntos de corte (break points)
#3. nombres categoricos en los intervalos
students$Income.cat <- cut(students$Income, breaks = bp, labels= names)
#vector brak points para variables categoricas
bp <- c(-Inf, 10000, 31000, Inf)
names <- c("Low", "Average", "High")
#Cut recibe 3 parametros
#1. columna a cortar
#2. puntos de corte (break points)
#3. nombres categoricos en los intervalos
students$Income.cat <- cut(students$Income, breaks = bp, labels= names)
students <- read.csv('Recursos/r-course-master/data/tema1/data-conversion.csv')
#Cut recibe 3 parametros
#1. columna a cortar
#2. puntos de corte (break points)
#3. nombres categoricos en los intervalos
students$Income.cat <- cut(students$Income, breaks = bp, labels= names)
students$Income.cat <- cut(students$Income, breaks = bp)
#Cut recibe 3 parametros
#1. columna a cortar
#2. puntos de corte (break points)
#3. nombres categoricos en los intervalos
students$Income.cat <- cut(students$Income, breaks = bp, labels= names)
students$Income.cat2 <- cut(students$Income, breaks = bp)
levels <- c("level1", "level2", "level3", "level4")
students$Income.cat3 <- cut(students$Income, braks = 4, labels = levels)
students$Income.cat3 <- cut(students$Income, breaks = 4, labels = levels)
students$Income.cat3 <- cut(students$Income, breaks = 3, labels = names)
students$Income.cat3 <- cut(students$Income, breaks = 3)
, labels = names
students$Income.cat3 <- cut(students$Income, breaks = 3, labels = names)
install.packages('dummies')
library(dummies)
family.salary = c(40000,60000,50000,80000,60000,70000,60000)
family.size = c(4,3,2,2,3,4,3)
family.car = c('lujo','compacto','utilitario','lujo','compacto','compacto','compacto')
family <- data.frame(family.salary,family.size,family.car)
View(family)
#Variables ficticias
students <- read.csv('Recursos/r-course-master/data/tema1/data-conversion.csv')
students_dummy <- dummy.data.frame(students, sep = ".")
View(students_dummy)
names(students_dummy)
View(students)
View(students_dummy)
View(students)
View(students_dummy)
dummy(students$State, sep =".")
dummy.data.frame(students, names = c("State", "Gender"), sep = ".")
dummy.data.frame(students, names = c("Gender"), sep = ".")
housng.data <- read.csv('Recursos/r-course-master/data/tema1/housing-with-missing-value.csv')
View(housng.data)
is.na(housng.data)
housng.data <- read.csv('Recursos/r-course-master/data/tema1/housing-with-missing-value.csv', header = T, stringsAsFactors =  F)
housing.data <- read.csv('Recursos/r-course-master/data/tema1/housing-with-missing-value.csv', header = T, stringsAsFactors =  F)
remove(housng.data)
#Despues de cargar el data set, lo primero que hacemos es un resumen de las variables
#summary es muy importante, da la pista para donde empezar a buscar cosas
summary(housing.data)
#Omitir todos los NA
husing.data.1 <- na.omit(housing.data)
View(husing.data.1)
summary(housing.data.1)
remove(husing.data.1)
#Omitir todos los NA
housing.data.1 <- na.omit(housing.data)
summary(housing.data.1)
housing.data.2<- housing.data.1[complete.cases(housing.data[!(names(housing.data)%in% drop_na),]),]
#Eliminar NA de una columna
drop_na <- c("rad")
housing.data.2<- housing.data.1[complete.cases(housing.data[!(names(housing.data)%in% drop_na),]),]
View(housing.data.2)
#Eliminar una columna
housing.data$rad <- NULL
#Eliminar varias columnas
drops <- c("rad","ptratio")
housing.data.3 <- housing.data[!(names(housing.data) %in% drops),]
housing.data.3 <- housing.data[!(names(housing.data) %in% drops)]
View(housing.data.3)
install.packages("Hmisc")
library(Hmisc)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
y
library(Hmisc)
housing.data <- read.csv('Recursos/r-course-master/data/tema1/housing-with-missing-value.csv')
#La Imputación involucrarellenar o cambiar NA por constantes
housing.data$ptratio <- impute(housing.data$ptratio, mean)
summary(housing.data)
housing.data$rad <- impute(housing.data$rad, mean)
summary(housing.data)
housing.data <- read.csv('Recursos/r-course-master/data/tema1/housing-with-missing-value.csv')
housing.data.1 <- housing.data
#La Imputación involucra rellenar o cambiar NA por constantes
housing.data.1$ptratio <- impute(housing.data$ptratio, mean)
housing.data.1$rad <- impute(housing.data$rad, mean)
remove(housing.data.1)
housing.data.1 <- housing.data
summary(housing.data.1)
#La Imputación involucra rellenar o cambiar NA por constantes
housing.data.1$ptratio <- impute(housing.data$ptratio, mean)
summary(housing.data.1)
housing.data.1$rad <- impute(housing.data$rad, mean)
summary(housing.data.1)
housing.data.2 <- housing.data
#Imputamos los NA por la mediana de los datos
housing.data.2$ptratio <- impute(housing.data.2$ptratio, median)
housing.data.2$rad <- impute(housing.data.2$rad, median)
summary(housing.data.1)
housing.data.3 <- housing.data
#Utilizar valor pre definido
housing.data.3$ptratio <- impute(housing.data.3$ptratio, 18)
summary(housing.data.2)
summary(housing.data.3)
housing.data.3$rad <- impute(housing.data.3$rad, 18)
summary(housing.data.3)
housing.data.3$rad <- impute(housing.data.3$rad, 7)
summary(housing.data.3)
#Patron que sigue las variables que faltan
install.package("mice")
#Patron que sigue las variables que faltan
install.packages("mice")
library(mice)
md.pattern(housing.data)
#plots
install.packages("VIM")
library(VIM)
#Agregar data frame
aggr(housing.data)
#Agregar data frame
aggr(housing.data, col = c('green','red'))
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T)
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T)
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T, labels = names(housing.data))
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T, labels = names(housing.data), cex.axis = 1)
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T, labels = names(housing.data), cex.axis = 0,5)
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T, labels = names(housing.data), cex.axis = 0.5)
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T,
labels = names(housing.data), cex.axis = 0.5, gap = 3)
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T,
labels = names(housing.data), cex.axis = 0.7, gap = 1)
#Agregar data frame
aggr(housing.data, col = c('green','red'), numbers = T, sortVars = T,
labels = names(housing.data), cex.axis = 0.7, gap = 1, ylab = c("Histograma NAs", "Patrón"))
install.packages('tidyr')
library(tidyr)
crime_data <- read.csv('Recursos/r-course-master/data/tema1/USArrests.csv')
View(crime_data)
crime_data <- read.csv('Recursos/r-course-master/data/tema1/USArrests.csv',stringsAsFactors = F)
View(crime_data)
#Añadir columna al dataset
crime_data <- cbind(state = row.names(crime_data),crime_data)
View(crime_data)
rendimiento_academico <- read.csv('~/DATOS/Rendimiento_Académico/Datos_UNIFICADOS_INGENIERIAS.csv')
View(rendimiento_academico)
rendimiento_academico <- read.csv('~/DATOS/Rendimiento_Académico/Datos_UNIFICADOS_MPDAE.csv')
View(rendimiento_academico)
View(rendimiento_academico)
View(rendimiento_academico)
remove(rendimiento_academico)
#Unir información
crime_data.1 <- gather(crime_data, key="crime_type", value = 'arrest_estimated', Murder:UrbanPop)
View(crime_data.1)
View(crime_data)
#Traducir todas las columnas excepto state
crime_data.2 <- gather(crime_data, key="crime_type", value = "arrest_estimated", -state)
library(tidyr)
#Traducir todas las columnas excepto state
crime_data.2 <- gather(crime_data, key="crime_type", value = "arrest_estimated", -state)
View(crime_data.2)
crime_data.3 <- gather(crime_data, key="crime_type", value = "arrest_estimated", Murder, Assault)
View(crime_data.3)
View(crime_data)
View(crime_data.1)
View(crime_data.2)
#Separar
crime_data.4 <- spread(cirme_data.2, key = "crime_type", value = "arrest_estimated")
#Separar
crime_data.4 <- spread(crime_data.2, key = "crime_type", value = "arrest_estimated")
View(crime_data.4)
View(crime_data)
View(crime_data.4)
View(crime_data)
#Unit: Tomar varias columnas y unirlas en una sola
crime_data.5 <- unite(crime_data, col="Murder_Assault", Murder, Assault, sep ="_")
View(crime_data.5)
crime_data.6 <- separate(crime_data.5, col ="Murder_Assault", into = c("Murder","Assault"), sep = "_")
View(crime_data.6)
View(crime_data.6)
library(mice)
housing_data <- read.csv('Recursos/r-course-master/data/tema1/housing-with-missing-value.csv',
header = T,  stringsAsFactors = F)
View(housing_data)
summary(housing_data)
#predictive mean machine, modelo predictivo para predecir el valor promedio de los datos
imputed_data <- mice(housing_data[, names(housing_data) %in% columns],
m = 5, maxit = 50, method = 'pmm', seed = 2018)
columns <- c('ptratio', 'rad')
#predictive mean machine, modelo predictivo para predecir el valor promedio de los datos
imputed_data <- mice(housing_data[, names(housing_data) %in% columns],
m = 5, maxit = 50, method = 'pmm', seed = 2018)
View(imputed_data)
#predictive mean machine, modelo predictivo para predecir el valor promedio de los datos
imputed_data <- mice(housing_data[, names(housing_data) %in% columns],
m = 5, maxit = 50, method = 'pmm', seed = 2018)
summary(imputed_data)
summary(imputed_data)
imputed_data <- mice(housing_data[,names(housing_data) %in% columns],
m = 5, maxit = 50, method = 'pmm', seed = 2018)
summary(imputed_data)
complete_data <- complete(imputed_data)
View(imputed_data)
View(complete_data)
View(housing_data)
